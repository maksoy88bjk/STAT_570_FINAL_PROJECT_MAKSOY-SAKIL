---
title: "Evaluation of Assimilated and Non-Assimilated WRF Temperature Predictions for Northwestern Türkiye: A case study for the period between 11 and 16 August, 2004"
author: "Mehmet AKSOY & Sercan AKIL"
format: html
editor: visual
---

## Introduction

### WRF Numerical Weather Prediction Model

### Data Assimilation

## Implementation in R

There are two files for two different domains as assimilated and non-assimilated predictions of WRF model. Thus, there are four netcdf files totally. We are going to define prediction variables, forecast period and coverage of domains for each file.

### Uploading Necessary Packages

We will need several packages for some implementations in R, for instance; opening of the netcdf files of WRF data, handling of WRF outputs, visualization and etc.

```{r}
#| warning: false
library(readxl)
library(tidyverse)
library(ggplot2)
library(raster)
library(rnaturalearth)
library(ncdf4)
library(R.utils)
library(sf)
library(gt)
```

### Assimilated WRF Data

Firstly, we opened the assimilated WRF output for domain 1. You can see the content of WRF output below, the data cover time and coverage domain information with meteorological predictions such as wind speed **(U10 & V10)**, precipitation **(RAINC & RAINNC)**, etc. We need to use name of the variables to extract specific data variables from the raw data.

```{r}
fname <- paste0("D:/Kitaplar/METU-PHD/Thesis/IsmailHocandanAldim_Aksoy_27092023/",
"aswout/wrfout_d01_2004-08-11_00_00_00")
nc_data <- nc_open(fname)
```

### Temperature Prediction in WRF

In the WRF data, air temperature at 2 meter, the height of observation at gauges, is available. If 2 meter temperature is not available in netcdf file, the calculation of [Air Temperature Prediction](http://gradsusr.org/pipermail/gradsusr/2011-December/031698.html) from WRF data is described at the given link based on [WRF manual](https://www2.mmm.ucar.edu/wrf/users/docs/user_guide_v4/contents.html). In such a case, *perturbation potential temperature*, *base pressure* and *perturbation pressure* variables has to be extracted to get air temperature prediction.

```         
float T2[west_east,south_north,Time]   
    FieldType: 104
    MemoryOrder: XY 
    description: TEMP at 2 M
    units: K
    stagger: 
    coordinates: XLONG XLAT
```

### Spatial Resolution (Domain 1)

Spatial resolution of domain 1 is 12 km as you can see below *(DX: 12000, DY:12000)*.

```         
78 global attributes:
    TITLE:  OUTPUT FROM WRF V3.1.1 MODEL
    START_DATE: 2004-08-11_00:00:00
    SIMULATION_START_DATE: 2004-08-11_00:00:00
    WEST-EAST_GRID_DIMENSION: 192
    SOUTH-NORTH_GRID_DIMENSION: 116
    BOTTOM-TOP_GRID_DIMENSION: 28
    DX: 12000
    DY: 12000
```

There are **41** time steps which means we can get predictions along the domain **(191x115)** for whole period. Additionally, the data includes information for **27** layers from bottom to top of the atmosphere.

```{r}
long<- ncvar_get(nc_data, "XLONG")
lat<- ncvar_get(nc_data, "XLAT", verbose = F)

temp<- ncvar_get(nc_data, "T2") 
dim(temp)
dim(ncvar_get(nc_data, "T"))
```

### Forecast Period & Time Interval (Domain 1)

We can also obtained the forecast horizon by getting time steps from the data. After getting time steps, we see that forecast period is between 11 and 16 (00:00 UTC) August, 2004. In this case, the time interval for the forecast period up to +120 hours *(or five days)* is three hour.

```{r}
t <- ncvar_get(nc_data, "Times"); t
ymd_hms(t[41]) - ymd_hms(t[1])
```

### Study Area (Domain 1)

@fig-domain1 below shows the coverage of domain 1 where covers Türkiye and its surrounding.

```{r}
#| label: fig-domain1
#| fig-cap: 
#|  Türkiye with its neighboring countries and coverage of domain 1 for assimilated-WRF predictions.

raster_temp<- list()
for (i in 1:dim(temp)[3])   {
    raster_temp[[i]] <- raster(t(temp[, , i] - 273.15), 
       xmn=min(long), xmx=max(long),
       ymn=min(lat), ymx=max(lat), 
       crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
}

temp_df <-as.data.frame(raster_temp[[length(t)]], xy = TRUE) 
world <- rnaturalearth::ne_countries(scale='medium',returnclass = 'sf')

ggplot(data = world)  + geom_sf(fill = "white") + 
  coord_sf(crs = st_crs(4326), xlim = c(10, 55), ylim = c(30,50)) +
  geom_raster(data = temp_df, aes(x = x, y = y, fill = layer), 
            alpha=0.7) +
  scale_fill_viridis_c() +  labs(x="",y="") + 
  ggtitle("Coverage of Domain 1") 
```

### Temperature Prediction (Domain 2)

There are **121** time steps for second domain since we can inference by dimension of **T2** data.

```{r}
fname2 <- paste0("D:/Kitaplar/METU-PHD/Thesis/IsmailHocandanAldim_Aksoy_27092023/",
"aswout/wrfout_d02_2004-08-11_00_00_00")
nc_data2 <- nc_open(fname2)

long_2<- ncvar_get(nc_data2, "XLONG")
lat_2<- ncvar_get(nc_data2, "XLAT", verbose = F)
temp_2<- ncvar_get(nc_data2, "T2") 

dim(temp_2)
```

### Spatial Resolution (Domain 2)

Spatial resolution of domain 2 is 4 km which is a finer resolution than previous one *(DX: 4000, DY: 4000)*.

```         
78 global attributes:
    TITLE:  OUTPUT FROM WRF V3.1.1 MODEL
    START_DATE: 2004-08-11_00:00:00
    SIMULATION_START_DATE: 2004-08-11_00:00:00
    WEST-EAST_GRID_DIMENSION: 133
    SOUTH-NORTH_GRID_DIMENSION: 64
    BOTTOM-TOP_GRID_DIMENSION: 28
    DX: 4000
    DY: 4000
```

### Forecast Period & Time Interval (Domain 2)

Forecast period for domain 2 is same with previous one. However, the time interval is one hour and it has a finer temporal resolution.

```{r}
t2 <- ncvar_get(nc_data2, "Times"); t2
ymd_hms(t2[121]) - ymd_hms(t2[1])
```

### Study Area (Domain 2)

@fig-domain2 below shows the comparison of two domains and coverage of domain 2 where covers some part of northwest of Türkiye.

```{r}
#| warning: false
#| label: fig-domain2
#| fig-cap: Comparison of domain 1 and 2. 

raster_temp_2<- list()
for (i in 1:dim(temp_2)[3])   {
    raster_temp_2[[i]] <- raster(t(temp_2[, , i] - 273.15), 
       xmn=min(long_2), xmx=max(long_2),
       ymn=min(lat_2), ymx=max(lat_2), 
       crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
                              }

temp_df_2 <-as.data.frame(raster_temp_2[[length(t2)]], xy = TRUE) 
world <- rnaturalearth::ne_countries(scale='medium',returnclass = 'sf')

ggplot(data = world)  + geom_sf(fill = "white") + 
  coord_sf(crs = st_crs(4326), xlim = c(19, 47.5), ylim = c(33.5,47)) +
  geom_raster(data = temp_df, 
            aes(x = x, y = y, fill = layer), alpha=0.4, show.legend = FALSE) + 
  geom_raster(data = temp_df_2, 
            aes(x = x, y = y, fill = layer), alpha=0.7, show.legend = FALSE) + 
  scale_fill_viridis_c() + labs(x="",y="") + 
  ggtitle("Coverage of Domain 2") 
```

### Identification of Meteorological Stations

Domain 2 covers several provinces which are located northwest of Türkiye. Thus, we need to determine meteorological stations for comparing observation versus assimilated and non-assimilated WRF predictions. Only one station was selected for each province to evaluate the performance of both assimilated and non-assimilated WRF predictions. @tbl-gauges-domain2 shows the main gauges across the domain 2.

```{r}
#| label: tbl-gauges-domain2
#| tbl-cap: Meteorological stations accross the domain 2.

df_gauges <-  read.delim("D:/Kitaplar/METU-PHD/COURSES/3-TERM/STAT_570/STAT_570_FINAL_PROJECT_MAKSOY-SAKIL/gauges.txt", sep="|")

df_gauges<- df_gauges[,-c(3,4)]
colnames(df_gauges)<- c("Station","Province","Latitude","Longitude","Altitude") ; 

df_gauges$Province <- tolower(df_gauges$Province) |> str_to_title() 
df_gauges |> gt()


```

@fig-gauges is shown for the distribution of meteorological stations along the study area.

```{r}
#| label: fig-gauges
#| fig-cap: Distribution of Meteorological Stations Over Domain 2.
extents<- extent(raster_temp_2[[length(t2)]])

ggplot(data = world)  + geom_sf(fill = "white") + 
  coord_sf(crs = st_crs(4326), xlim = c(extents[1], extents[2]), 
                               ylim = c(extents[3],extents[4])) +
  geom_raster(data = temp_df_2, 
        aes(x = x, y = y, fill = layer), alpha=0.5, show.legend = FALSE) +
  scale_fill_viridis_c() + labs(x="",y="") +
  geom_point(data = df_gauges, aes(x=Longitude, y=Latitude),
             size=3, colour="darkred") + 
  geom_text(data = df_gauges,  mapping = aes(x=Longitude, y=Latitude, label=Province), nudge_y = -0.1) 

```

### Get Temperature Observations

```{r}
temp_obs<- read_excel("D:/Kitaplar/METU-PHD/COURSES/3-TERM/STAT_570/STAT_570_FINAL_PROJECT_MAKSOY-SAKIL/df_2023122096C0-Saatlik_Sicaklik.xlsx")
head(temp_obs)

temp_obs<-
  temp_obs |>
  mutate(date= as.Date(with(temp_obs, paste(YIL, AY, GUN,sep="-")), "%Y-%m-%d")) |>
  mutate(dates= as.POSIXct(paste(date, paste(SAAT, 0, 0, sep = ":")), tz="UTC")) |>
  dplyr::select(Istasyon_No, dates, SICAKLIK)
nrow(temp_obs)

temp_obs<-
  temp_obs |> 
  group_by(Istasyon_No) |> 
  tidyr::complete( dates = seq(ymd_hm("2004-08-11 00:00"), ymd_hm("2004-08-16 23:00"), by = "1 hours"))
nrow(temp_obs)

head(temp_obs)

```

### Extraction of Temperature Predictions from WRF

```{r}
centroids <- df_gauges[,c(1,3,4)]
coordinates(centroids)= ~ Longitude + Latitude

# domain1
raster_temp_stack<- stack(raster_temp)
raster_temp_value<- raster::extract(raster_temp_stack, centroids)

rt_cpv <- cbind(centroids,raster_temp_value)
rt_cpv_df<- data.frame(rt_cpv)
rt_cpv_df<- rt_cpv_df[,-ncol(rt_cpv_df)]

rt_cpv_df<- 
  rt_cpv_df |> 
  dplyr::select(Station, Longitude, Latitude,  everything() )
colnames(rt_cpv_df) <- append(colnames(rt_cpv_df[1:3]),as.character(t))
head(rt_cpv_df)[,1:5]

```

```{r}
# domain2
raster_temp_stack_2<- stack(raster_temp_2)
raster_temp_value_2<- raster::extract(raster_temp_stack_2, centroids)

rt_cpv_2 <- cbind(centroids,raster_temp_value_2)
rt_cpv_df_2<- data.frame(rt_cpv_2) 
rt_cpv_df_2<- rt_cpv_df_2[,-ncol(rt_cpv_df_2)]

rt_cpv_df_2<- 
  rt_cpv_df_2 |> 
  dplyr::select(Station, Longitude, Latitude,  everything() )
colnames(rt_cpv_df_2)<- append(colnames(rt_cpv_df_2[1:3]),as.character(t2))
head(rt_cpv_df_2)[,1:5]
```

We need to apply similar procedures on non-assimilated WRF predictions for extraction as shown above.

```{r}
#domain1
fname_nas <- paste0("D:/Kitaplar/METU-PHD/Thesis/IsmailHocandanAldim_Aksoy_27092023/",
"wout/wrfout_d01_2004-08-11_00_00_00")
nc_data_nas <- nc_open(fname_nas)

long_nas<- ncvar_get(nc_data_nas, "XLONG")
lat_nas<- ncvar_get(nc_data_nas, "XLAT", verbose = F)
temp_nas<- ncvar_get(nc_data_nas, "T2") 
t_nas <- ncvar_get(nc_data_nas, "Times")

raster_temp_nas<- list()
for (i in 1:dim(temp_nas)[3])   {
    raster_temp_nas[[i]] <- raster(t(temp_nas[, , i] - 273.15), 
       xmn=min(long_nas), xmx=max(long_nas),
       ymn=min(lat_nas), ymx=max(lat_nas), 
       crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
}

#domain2
fname2_nas <- paste0("D:/Kitaplar/METU-PHD/Thesis/IsmailHocandanAldim_Aksoy_27092023/",
"wout/wrfout_d02_2004-08-11_00_00_00")
nc_data2_nas <- nc_open(fname2_nas)

long_2_nas<- ncvar_get(nc_data2_nas, "XLONG")
lat_2_nas<- ncvar_get(nc_data2_nas, "XLAT", verbose = F)
temp_2_nas<- ncvar_get(nc_data2_nas, "T2") 
t2_nas <- ncvar_get(nc_data2_nas, "Times")

raster_temp_2_nas<- list()
for (i in 1:dim(temp_2_nas)[3])   {
    raster_temp_2_nas[[i]] <- raster(t(temp_2_nas[, , i] - 273.15), 
       xmn=min(long_2_nas), xmx=max(long_2_nas),
       ymn=min(lat_2_nas), ymx=max(lat_2_nas), 
       crs=CRS("+proj=longlat +ellps=WGS84 +datum=WGS84 +no_defs+ towgs84=0,0,0"))
}

# domain1
raster_temp_stack_nas<- stack(raster_temp_nas)
raster_temp_value_nas<- raster::extract(raster_temp_stack_nas, centroids)

rt_cpv_nas <- cbind(centroids,raster_temp_value_nas)
rt_cpv_df_nas<- data.frame(rt_cpv_nas)
rt_cpv_df_nas<- rt_cpv_df_nas[,-ncol(rt_cpv_df_nas)]

rt_cpv_df_nas<- 
  rt_cpv_df_nas |> 
  dplyr::select(Station, Longitude, Latitude,  everything() )
colnames(rt_cpv_df_nas) <- append(colnames(rt_cpv_df_nas[1:3]),as.character(t_nas))

# domain2
raster_temp_stack_2_nas<- stack(raster_temp_2_nas)
raster_temp_value_2_nas<- raster::extract(raster_temp_stack_2_nas, centroids)

rt_cpv_2_nas <- cbind(centroids,raster_temp_value_2_nas)
rt_cpv_df_2_nas<- data.frame(rt_cpv_2_nas) 
rt_cpv_df_2_nas<- rt_cpv_df_2_nas[,-ncol(rt_cpv_df_2_nas)]

rt_cpv_df_2_nas<- 
  rt_cpv_df_2_nas |> 
  dplyr::select(Station, Longitude, Latitude,  everything() )
colnames(rt_cpv_df_2_nas)<- append(colnames(rt_cpv_df_2_nas[1:3]),as.character(t2_nas))

head(rt_cpv_df_2_nas)[,1:5]
```

```{r}
# domain1 assimilated prediction: rt_cpv_df
# domain2 assimilated prediction: rt_cpv_df_2

# domain1 non_assimilated prediction: rt_cpv_df_nas
# domain2 non_assimilated prediction: rt_cpv_df_2_nas

# temp_obs

d01 <- 
  rt_cpv_df |> 
  distinct(Station, .keep_all = TRUE) |> 
  pivot_longer(
    cols = starts_with("2004"),
    names_to = "dates",
    values_to = "predict_do1",
    values_drop_na = TRUE
  ) |> 
  dplyr:: select(Station, dates, predict_do1)

d01$dates<- str_replace(d01$dates, "_"," ")
d01$dates<- as.POSIXct(d01$dates)



```
